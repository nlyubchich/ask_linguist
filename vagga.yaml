containers:
  python:
    setup:
    - !Alpine v3.3
    - !Install [libpq, postgresql-dev]
    - !Py3Install ['setuptools']
    - !Py3Requirements "requirements.txt"
    environ:
      LC_ALL: en_US.UTF-8
      APP_SETTINGS: 'project.config.VaggaTestingConfig'
      DATABASE_URL: 'postgres://vagga:vagga@localhost:5433/test'
      SECRET_KEY: 'really secret'
      CSRF_SECRET: 'really secret'

  selenium:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !Install [unzip, wget]
    - !Sh |
        cd /usr/bin/
        wget http://chromedriver.storage.googleapis.com/2.21/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
    - !Install [chromium-browser]
    - !Py3Install [selenium, setuptools]
    - !Py3Requirements "requirements-test.txt"
#    - !Sh echo 'CHROMIUM_FLAGS=" --user-data-dir"' >> /etc/chromium-browser/default

    environ:
      LC_ALL: en_US.UTF-8
      APP_SETTINGS: 'project.config.VaggaConfig'
      DATABASE_URL: 'postgres://vagga:vagga@localhost:5433/test'
      SECRET_KEY: 'really secret'
      CSRF_SECRET: 'really secret'
    volumes:
      /tmp: !Tmpfs
        size: 100Mi
        mode: 0o1777
        subdirs:
          .X11-unix:
      /tmp/.X11-unix: !BindRW /volumes/X11

  postgres:
    setup:
    - !Ubuntu trusty
    - !Install [postgresql]
    - !EnsureDir /data
    - !EnsureDir /work/.db/data
    environ:
      LC_ALL: en_US.UTF-8
      PG_PORT: 5433
      PG_DB: test
      PG_USER: vagga
      PG_PASSWORD: vagga
      PGDATA: /data
      PG_BIN: /usr/lib/postgresql/9.3/bin
    volumes:
      /data: !BindRW /work/.db/data

  postgres-empty:
    setup:
    - !Ubuntu trusty
    - !Install [postgresql]
    - !EnsureDir /data
    environ:
      LC_ALL: en_US.UTF-8
      PGDATA: /data
      PG_PORT: 5433
      PG_DB: test
      PG_USER: vagga
      PG_PASSWORD: vagga
      PG_BIN: /usr/lib/postgresql/9.3/bin
    volumes:
      /data: !Tmpfs
        size: 100M
        mode: 0o700

  redis:
    setup:
    - !Alpine v3.3
    - !Install [redis]
    environ:
      LC_ALL: en_US.UTF-8

commands:
  redis: &redis !Command
    container: redis
    run: |
      redis-server --version
      redis-server --daemonize no
      sleep infinity

  postgres: &postgres !Command
    container: postgres
    run: |
      chown -R postgres:postgres $PGDATA;
      chmod -R 700 postgres:postgres $PGDATA;
      if [ -z $(ls -A $PGDATA) ]; then
        su postgres -c "$PG_BIN/pg_ctl initdb";
        su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
        su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
        su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
        su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
      else
        su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
      fi
      rm /work/.dbcreation # Release lock
      sleep infinity

  postgres-empty: &postgres-empty !Command
    container: postgres-empty
    run: |
      chown postgres:postgres $PGDATA;
      if [ -z $(ls -A $PGDATA) ]; then
        su postgres -c "$PG_BIN/pg_ctl initdb";
        su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
        su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
        su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
        su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
      else
        su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
      fi
      rm /work/.dbcreation # Release lock
      sleep infinity

  migrate: !Supervise
    description: Run app
    children:
      postgres: *postgres
      service: !Command
        container: python
        run: |
            touch /work/.dbcreation # Create lock file
            while [ -f /work/.dbcreation ]; do sleep 0.2; done # Acquire lock
            python3 manage.py db migrate

  run: !Supervise
    description: Run app
    children:
      postgres: *postgres
      redis: *redis
      service: &run !Command
        container: python
        run: |
          touch /work/.dbcreation # Create db lock file

          # acquire db lock
          while [ -f /work/.dbcreation ]; do sleep 0.2; done

          python3 manage.py db upgrade

          # release start project lock
          if [ -f /work/.startproject ]; then rm /work/.startproject; fi

          python3 run.py

  test: !Supervise
    description: Run tests
    children:
      postgres-empty: *postgres
      redis: *redis
      run: *run
      service: !Command
        container: selenium
        environ: { HOME: /tmp }
        run: |
          touch /work/.startproject # Create lock file
          while [ -f /work/.startproject ]; do sleep 0.2; done # Acquire lock
          python3 -m unittest project.tests.functional
